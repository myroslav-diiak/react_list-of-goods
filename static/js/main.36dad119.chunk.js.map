{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","setSortType","type","setState","setIsReverse","resetState","this","goodsForShow","sort","firstItem","nextItem","ALPABET","localeCompare","LENGTH","length","reverse","className","classNames","onClick","map","item","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,wGAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAgCE,IAAME,EAAb,4MACEC,MAAQ,CACNC,YAAY,EACZC,SAAU,GAHd,EAMEC,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEH,SAAUE,KAP9B,EAUEE,aAAe,WACb,EAAKD,UAAS,SAAAL,GACZ,MAAO,CACLC,YAAaD,EAAMC,gBAb3B,EAkBEM,WAAa,WACX,EAAKF,SAAS,CACZJ,YAAY,EACZC,SAAU,KArBhB,4CAyBE,WAAU,IAAD,OACP,EAAiCM,KAAKR,MAA9BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SAEdO,EAAY,UAAOX,GAiBzB,OAfAW,EAAaC,MAAK,SAACC,EAAWC,GAC5B,OAAQV,GACN,KAAKL,EAASgB,QACZ,OAAOF,EAAUG,cAAcF,GACjC,KAAKf,EAASkB,OACZ,OAAOJ,EAAUK,OAASJ,EAASI,OACrC,QACE,OAAO,MAITf,GACFQ,EAAaQ,UAIb,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEd,KAAK,SACLc,UAAWC,IAAW,SAAU,UAAW,CACzC,WAAYjB,IAAaL,EAASgB,UAEpCO,QAAS,WACP,EAAKjB,YAAYN,EAASgB,UAN9B,iCAYA,wBACET,KAAK,SACLc,UAAWC,IAAW,SAAU,aAAc,CAC5C,WAAYjB,IAAaL,EAASkB,SAEpCK,QAAS,WACP,EAAKjB,YAAYN,EAASkB,SAN9B,4BAYA,wBACEX,KAAK,SACLc,UAAWC,IAAW,SAAU,aAAc,CAC5C,YAAalB,IAEfmB,QAASZ,KAAKF,aALhB,sBAUEL,GAA2B,IAAbC,IACd,wBACEE,KAAK,SACLc,UAAU,4BACVE,QAASZ,KAAKD,WAHhB,sBAUJ,6BACGE,EAAaY,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,eA/FpC,GAAyBC,IAAMC,WC/C/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.36dad119.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    isReversed: false,\n    sortType: 0,\n  };\n\n  setSortType = (type: SortType) => {\n    this.setState({ sortType: type });\n  };\n\n  setIsReverse = () => {\n    this.setState(state => {\n      return {\n        isReversed: !state.isReversed,\n      };\n    });\n  };\n\n  resetState = () => {\n    this.setState({\n      isReversed: false,\n      sortType: 0,\n    });\n  };\n\n  render() {\n    const { isReversed, sortType } = this.state;\n\n    const goodsForShow = [...goodsFromServer];\n\n    goodsForShow.sort((firstItem, nextItem) => {\n      switch (sortType) {\n        case SortType.ALPABET:\n          return firstItem.localeCompare(nextItem);\n        case SortType.LENGTH:\n          return firstItem.length - nextItem.length;\n        default:\n          return 0;\n      }\n    });\n\n    if (isReversed) {\n      goodsForShow.reverse();\n    }\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames('button', 'is-info', {\n              'is-light': sortType !== SortType.ALPABET,\n            })}\n            onClick={() => {\n              this.setSortType(SortType.ALPABET);\n            }}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button', 'is-success', {\n              'is-light': sortType !== SortType.LENGTH,\n            })}\n            onClick={() => {\n              this.setSortType(SortType.LENGTH);\n            }}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button', 'is-warning', {\n              'is-light': !isReversed,\n            })}\n            onClick={this.setIsReverse}\n          >\n            Reverse\n          </button>\n\n          {(isReversed || sortType !== 0) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.resetState}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          {goodsForShow.map(item => (\n            <li data-cy=\"Good\" key={item}>\n              {item}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}